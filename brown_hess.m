function bHess = brown_hess(X)

% Function for computing the Hessian matrix in a specified point of
% Brown function

% INPUTS
% X: n by 1 vector representing a point in n-dimensional space

% OUTPUTS
% bHess: n by n matrix containing the Hessian matrix in X

%f = @(x, k) [2*log(x(k+1,:).^2)*(x(k+1, :)).^(x(k,:).^2 + 1) + 2*(x(k+1, :).^2 + 1)*(x(k,:).^2).^(x(k+1,:).^2) + 4*x(k,:).^2*log(x(k+1,:).^2).^2*(x(k+1,:).^2).^(x(k,:).^2 + 1) + 4*x(k,:).^2*x(k+1,:).^2*(x(k+1,:).^2 + 1)*(x(k,:).^2).^(x(k+1,:).^2 - 1), ...
%             (4*x(k,:)*(x(k+1,:).^2)^(x(k,:).^2 + 1))/x(k+1,:) + 4*x(k,:)*x(k+1,:)*(x(k,:).^2).^(x(k+1,:).^2) + 4*x(k,:)*x(k+1,:)*log(x(k,:).^2)*(x(k+1,:).^2 + 1)*(x(k,:).^2).^(x(k+1,:).^2) + 4*x(k,:)*x(k+1,:)*log(x(k+1,:).^2)*(x(k,:).^2 + 1)*(x(k+1,:).^2)^(x(k,:).^2); ...
%             (4*x(k+1,:)*(x(k,:).^2).^(x(k+1,:).^2 + 1))/x(k,:) + 4*x(k,:)*x(k+1,:)*(x(k+1,:).^2).^(x(k,:).^2) + 4*x(k,:)*x(k+1,:)*log(x(k,:).^2)*(x(k+1,:).^2 + 1)*(x(k,:).^2).^(x(k+1,:).^2) + 4*x(k,:)*x(k+1,:)*log(x(k+1,:).^2)*(x(k,:).^2 + 1)*(x(k+1,:).^2)^(x(k,:).^2), ...
%             2*log(x(k,:).^2)*(x(k,:).^2).^(x(k+1,:).^2 + 1) + 2*(x(k,:).^2 + 1)*(x(k+1,:).^2).^(x(k,:).^2) + 4*x(k+1,:).^2*log(x(k,:).^2).^2*(x(k,:).^2).^(x(k+1,:).^2 + 1) + 4*x(k,:).^2*x(k+1,:).^2*(x(k,:).^2 + 1)*(x(k+1,:).^2).^(x(k,:).^2 - 1)];

fh11 = @(x, k) 2*log(x(k+1,:).^2)*(x(k+1, :)).^(x(k,:).^2 + 1) + 2*(x(k+1, :).^2 + 1)*(x(k,:).^2).^(x(k+1,:).^2) + 4*x(k,:).^2*log(x(k+1,:).^2).^2*(x(k+1,:).^2).^(x(k,:).^2 + 1) + 4*x(k,:).^2*x(k+1,:).^2*(x(k+1,:).^2 + 1)*(x(k,:).^2).^(x(k+1,:).^2 - 1);
fh12 = @(x, k) (4*x(k,:)*(x(k+1,:).^2)^(x(k,:).^2 + 1))/x(k+1,:) + 4*x(k,:)*x(k+1,:)*(x(k,:).^2).^(x(k+1,:).^2) + 4*x(k,:)*x(k+1,:)*log(x(k,:).^2)*(x(k+1,:).^2 + 1)*(x(k,:).^2).^(x(k+1,:).^2) + 4*x(k,:)*x(k+1,:)*log(x(k+1,:).^2)*(x(k,:).^2 + 1)*(x(k+1,:).^2)^(x(k,:).^2);
fh21 = @(x, k) (4*x(k+1,:)*(x(k,:).^2).^(x(k+1,:).^2 + 1))/x(k,:) + 4*x(k,:)*x(k+1,:)*(x(k+1,:).^2).^(x(k,:).^2) + 4*x(k,:)*x(k+1,:)*log(x(k,:).^2)*(x(k+1,:).^2 + 1)*(x(k,:).^2).^(x(k+1,:).^2) + 4*x(k,:)*x(k+1,:)*log(x(k+1,:).^2)*(x(k,:).^2 + 1)*(x(k+1,:).^2)^(x(k,:).^2);
fh22 = @(x, k) 2*log(x(k,:).^2)*(x(k,:).^2).^(x(k+1,:).^2 + 1) + 2*(x(k,:).^2 + 1)*(x(k+1,:).^2).^(x(k,:).^2) + 4*x(k+1,:).^2*log(x(k,:).^2).^2*(x(k,:).^2).^(x(k+1,:).^2 + 1) + 4*x(k,:).^2*x(k+1,:).^2*(x(k,:).^2 + 1)*(x(k+1,:).^2).^(x(k,:).^2 - 1);

n = length(X);
bHess = zeros(n, n);

 
for k = 1:2:n
    for i = k:k+1
        for j = k:k+1
            if mod(i, 2) == 1
                if mod(j, 2) == 1
                    bHess(i, j) = fh11(X, k);
                else
                    bHess(i, j) = fh12(X, k);
                end
            else
                if mod(j, 2) == 1
                    bHess(i, j) = fh21(X, k);
                else
                    bHess(i, j) = fh22(X, k);
                end
            end
         end
    end
end

bHess = sparse(bHess);

end